{"version":3,"sources":["components/Autocomplete.js","components/GithubIssueSearch.js","App.js","serviceWorker.js","index.js"],"names":["Autocomplete","props","onKeyPress","event","a","async","setState","loading","getResults","target","value","results","matches","selected","select","onSelect","keyHandling","state","length","keyCode","newSelection","window","addEventListener","this","removeEventListener","className","placeholder","onChange","id","role","map","match","i","key","onClick","title","labels","l","name","React","Component","GithubIssueSearch","getGithubIssues","query","encodedQuery","encodeURIComponent","fetch","headers","response","status","json","mappedResults","items","r","url","html_url","Error","statusText","href","App","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAEqBA,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAIRC,WAAa,SAAOC,GAAP,eAAAC,EAAAC,OAAA,uDACX,EAAKC,SAAS,CAAEC,SAAS,IADd,WAAAH,EAAA,MAES,EAAKH,MAAMO,WAAWL,EAAMM,OAAOC,QAF5C,OAEPC,EAFO,OAGX,EAAKL,SAAS,CAAEM,QAASD,EAASE,SAAU,EAAGN,SAAS,IAH7C,sCALM,EAWnBO,OAAS,SAACD,GACR,EAAKP,SAAS,CAAEM,QAAS,GAAIC,SAAU,IACvC,EAAKZ,MAAMc,SAASF,IAbH,EAgBnBG,YAAc,SAACb,GACb,GAAK,EAAKc,MAAML,SAAyC,IAA9B,EAAKK,MAAML,QAAQM,OAG9C,GAAsB,KAAlBf,EAAMgB,QAAgB,CACxB,IAAIC,EAAe,EAAKH,MAAMJ,SAAW,EACrCO,EAAe,IACjBA,EAAe,EAAKH,MAAML,QAAQM,OAASE,GAC7C,EAAKd,SAAS,CAAEO,SAAUO,SACrB,GAAsB,KAAlBjB,EAAMgB,QAAgB,CAC/B,IAAIC,EAAe,EAAKH,MAAMJ,SAAW,EACrCO,GAAgB,EAAKH,MAAML,QAAQM,SACrCE,EAAe,GACjB,EAAKd,SAAS,CAAEO,SAAUO,SACC,KAAlBjB,EAAMgB,SACf,EAAKL,OAAO,EAAKG,MAAML,QAAQ,EAAKK,MAAMJ,YA7B5C,EAAKI,MAAQ,CAAEL,QAAS,IAFP,E,iFAoCjBS,OAAOC,iBAAiB,QAASC,KAAKP,e,6CAItCK,OAAOG,oBAAoB,QAASD,KAAKP,e,+BAGjC,IAAD,OACP,OACA,6BACE,yBAAKS,UAAU,4CACb,yBAAKA,UAAS,mCAA8BF,KAAKN,MAAMV,SAAW,eAChE,2BAAOkB,UAAU,mBAAmBC,YAAY,yBAAyBC,SAAUJ,KAAKrB,cAEvFqB,KAAKN,MAAML,SAAWW,KAAKN,MAAML,QAAQM,OAAS,GACjD,yBAAKO,UAAU,gBAAgBG,GAAG,gBAAgBC,KAAK,QACrD,yBAAKJ,UAAU,oBACdF,KAAKN,MAAML,QAAQkB,KAAI,SAACC,EAAOC,GAC9B,OAAQ,uBAAGC,IAAKD,EAAGP,UAAS,wBAAmB,EAAKR,MAAMJ,WAAamB,GAAK,aAAeE,QAAS,WAAQ,EAAKpB,OAAOiB,KACtH,4BAAKA,EAAMI,OACX,+BAAKJ,EAAMK,OAAON,KAAI,SAACO,GACrB,OAAO,0BAAMZ,UAAU,iBAAiBQ,IAAKI,EAAET,IAAKS,EAAEC,sB,GA1DhCC,IAAMC,WCC3BC,E,YACnB,WAAYxC,GAAQ,IAAD,8BACjB,4CAAMA,KAIRyC,gBAAkB,SAAOC,GAAP,qBAAAvC,EAAAC,OAAA,qDACZsC,EAAMzB,OAAS,GADH,wDAKZ0B,EALY,YAKSC,mBAAmBF,GAL5B,yDAAAvC,EAAA,MAMK0C,MAAM,wCAAD,OAAyCF,EAAzC,gBAAqE,CAC7FG,QAAS,CACP,cAAgB,qDARJ,UAYQ,OANpBC,EANY,QAYHC,OAZG,mCAAA7C,EAAA,MAaM4C,EAASE,QAbf,cAaVvC,EAbU,OAcVwC,EAAgBxC,EAAQyC,MAAMtB,KAAI,SAACuB,GACrC,MAAO,CACLjB,OAAQiB,EAAEjB,OACVD,MAAOkB,EAAElB,MACTmB,IAAKD,EAAEE,aAlBG,kBAqBPJ,GArBO,cAuBP,IAAIK,MAAMR,EAASS,YAvBZ,uCALC,EAgCnB1C,SAAW,SAACF,GACV,EAAKP,SAAS,CAACO,SAAUA,KA/BzB,EAAKI,MAAQ,CAAEJ,SAAU,MAFR,E,sEAqCjB,OAAO,6BACL,yBAAKY,UAAU,WACb,yBAAKA,UAAU,kBACb,kBAAC,EAAD,CAAcjB,WAAYe,KAAKmB,gBAAiB3B,SAAUQ,KAAKR,aAInE,yBAAKU,UAAU,WACZF,KAAKN,MAAMJ,UAAY,yBAAKY,UAAU,QACrC,yBAAKA,UAAU,gBACb,uBAAGA,UAAU,aAAaiC,KAAMnC,KAAKN,MAAMJ,SAASyC,KAAM/B,KAAKN,MAAMJ,SAASsB,OAC9E,yBAAKV,UAAU,yBACb,+BAAKF,KAAKN,MAAMJ,SAASuB,OAAON,KAAI,SAACO,GACnC,OAAO,0BAAMZ,UAAU,iBAAiBQ,IAAKI,EAAET,IAAKS,EAAEC,mB,GAnDvBC,IAAMC,WCwBtCmB,MAxBf,WACE,OACE,yBAAKlC,UAAU,OAiBb,kBAAC,EAAD,QCVcmC,QACW,cAA7BvC,OAAOwC,SAASC,UAEe,UAA7BzC,OAAOwC,SAASC,UAEhBzC,OAAOwC,SAASC,SAAS/B,MACvB,2DCZNgC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.913f8bb3.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Autocomplete extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { matches: []};\n  }\n\n  onKeyPress = async (event) => {\n    this.setState({ loading: true });\n    let results = await this.props.getResults(event.target.value);\n    this.setState({ matches: results, selected: 0, loading: false });\n  }\n\n  select = (selected) => {\n    this.setState({ matches: [], selected: 0 });\n    this.props.onSelect(selected);\n  }\n\n  keyHandling = (event) => {\n    if (!this.state.matches || this.state.matches.length === 0)\n      return;\n    \n    if (event.keyCode === 38) { // Up Arrow\n      let newSelection = this.state.selected - 1;\n      if (newSelection < 0)\n        newSelection = this.state.matches.length + newSelection;\n      this.setState({ selected: newSelection });\n    } else if (event.keyCode === 40) { // Down Arrow\n      let newSelection = this.state.selected + 1;\n      if (newSelection >= this.state.matches.length)\n        newSelection = 0;\n      this.setState({ selected: newSelection });\n    } else if (event.keyCode === 13) { // Enter\n      this.select(this.state.matches[this.state.selected]);\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"keyup\", this.keyHandling);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keyup\", this.keyHandling);\n  }\n\n  render() {\n    return (\n    <div>\n      <div className=\"dropdown is-active dropdown-autocomplete\">\n        <div className={`dropdown-trigger control ${this.state.loading && 'is-loading'}`}>\n          <input className=\"input is-rounded\" placeholder=\"Begin typing to search\" onChange={this.onKeyPress}/>\n        </div>\n          {this.state.matches && this.state.matches.length > 0 &&\n            <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n              <div className=\"dropdown-content\">\n              {this.state.matches.map((match, i) => {\n                return (<a key={i} className={`dropdown-item ${this.state.selected === i && 'is-active'}`} onClick={() => { this.select(match) }}>\n                  <h4>{match.title}</h4>\n                  <p> {match.labels.map((l) => {\n                    return <span className=\"tag is-rounded\" key={l.id}>{l.name}</span>\n                  })}\n                  </p>\n                </a>)  \n              })}\n              </div>\n            </div>\n          }\n      </div>\n    </div>)\n  }\n}\n\n","import React from 'react';\nimport Autocomplete from './Autocomplete';\n\nexport default class GithubIssueSearch extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { selected: null }\n  }\n  \n  getGithubIssues = async (query) => {\n    if (query.length < 3) {\n      return;\n    }\n\n    let encodedQuery = (`q=${encodeURIComponent(query)} repo:facebook/react type:issue state:open`);\n    let response = await fetch(`https://api.github.com/search/issues?${encodedQuery}&per_page=10`, {\n      headers: {\n        \"Authorization\": `token 8800a71721f051e1fa2e6e646929a4a9c7727b8d`\n      }\n    });\n    \n    if (response.status === 200) {\n      let results = await response.json()\n      let mappedResults = results.items.map((r) => {\n        return {\n          labels: r.labels,\n          title: r.title,\n          url: r.html_url\n        }\n      });\n      return mappedResults;\n    } else {\n      throw (new Error(response.statusText));\n    }\n  }\n\n  onSelect = (selected) => {\n    this.setState({selected: selected })\n  }\n\n  render() { \n    return <div>\n      <div className=\"columns\">\n        <div className=\"column is-half\">\n          <Autocomplete getResults={this.getGithubIssues} onSelect={this.onSelect} />\n        </div>\n      </div>\n\n      <div className=\"columns\">\n        {this.state.selected && <div className=\"card\">\n          <div className=\"card-content\">\n            <a className=\"title is-5\" href={this.state.selected.url}>{this.state.selected.title}</a>\n            <div className=\"content has-text-left\">\n              <p> {this.state.selected.labels.map((l) => {\n                return <span className=\"tag is-rounded\" key={l.id}>{l.name}</span>\n              })}\n              </p>\n            </div>\n          </div>\n        </div>}\n      </div>\n    </div>;\n  }\n}\n\n","import React from 'react';\nimport './App.css';\nimport GithubIssueSearch from './components/GithubIssueSearch';\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit this file <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n\n        \n      </header> */}\n      <GithubIssueSearch />\n    </div>\n  );\n}\n\nexport default App;\n// 8800a71721f051e1fa2e6e646929a4a9c7727b8d","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}